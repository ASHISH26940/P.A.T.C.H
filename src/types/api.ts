/**
 * t3-chat-frontend/types/api.ts
 *
 * Fully synced and consolidated Backend API Type Definitions.
 * This file precisely mirrors the provided Pydantic and SQLAlchemy models
 * to ensure a perfect data contract between the frontend and backend.
 */

//================================
// Enums
//================================
export enum Role {
  User = 'user',
  Model = 'model',
  Assistant = 'assistant',
}

//================================
// Authentication & User Schemas
// (from user.py, token.py)
//================================

// Matches the User model in user.py
export interface User {
  id: number; // Correctly typed as number based on user.py
  username: string;
  email?: string;
}

// Matches the UserCreate model in user.py
export interface UserCreate {
  username: string;
  email?: string;
  password?: string;
}

// Matches the Token model in token.py
export interface Token {
  access_token: string;
  token_type: string;
}

// For making login requests
export interface LoginRequest {
    username: string;
    password: string;
}

// For making register requests
export interface RegisterRequest extends UserCreate {}


//================================
// Chat Schemas
// (from chat.py)
//================================

/**
 * Represents a chat message specifically for the API payload, as defined in chat.py.
 * The backend only expects `role` and `content` for past messages.
 */
export interface ApiChatMessage {
    role: Role | string;
    content: string;
}

/**
 * Represents a rich chat message object for use in the frontend,
 * particularly for storing in IndexedDB. It contains more metadata.
 */
export interface BackendChatMessage {
  id?: number | string; // Can be auto-generated by Dexie or come from the backend
  role: Role;
  content: string;
  timestamp: string;
  userId: string; // The user ID is stored as a string in the DB
  conversationId?: string; // ID for grouping messages in a single chat
}

// Matches the ChatRequest model in chat.py
export interface ChatRequest {
  user_message: string;
  collection_name: string;
  user_id: string;
  past_messages?: ApiChatMessage[]; // Uses the new, correct type for the API
}

// Matches the ChatResponse model in chat.py
export interface ChatResponse {
  ai_response: string;
  source_documents?: DocumentQueryResult[];
  message_id: string;
}


//================================
// Document & Collection Schemas
// (from document.py)
//================================

// Using Record<string, unknown> is a type-safe alternative to an index signature with `any`.
export type ArbitraryMetadata = Record<string, unknown>;

export interface BackendDocument {
  id?: string;
  content: string;
  metadata: ArbitraryMetadata;
}

// Matches the DocumentCollectionCreate model in document.py
export interface DocumentCollectionCreate {
    name: string;
    metadata?: ArbitraryMetadata;
}

// Matches the DocumentQueryResult model in document.py and chat.py
export interface DocumentQueryResult {
  id?: string; // chat.py has this, document.py has it inside the document
  document?: BackendDocument; // document.py has this structure
  content?: string; // chat.py has this
  metadata?: ArbitraryMetadata; // chat.py has this
  distance?: number;
}

// Matches the DocumentsAddedResponse model in document.py
export interface DocumentsAddedResponse {
    collection_name: string;
    added_count: number;
    ids: string[];
}

// Matches the DocumentQuery model in document.py
export interface DocumentQuery {
    query_text: string;
    top_k?: number;
}

//================================
// Persona Schemas
// (inferred from persona.py)
//================================
export interface Persona {
  id: string; // UUID
  name: string;
  description?: string;
  traits: string[];
  goals: string[];
}

//================================
// Context Schemas
// (inferred from context.py)
//================================
export type DynamicContext = Record<string, unknown>;

export interface ContextResponse {
    user_id: string;
    context_data: DynamicContext;
    updated_at: string;
}

export interface PersonaCreate {
  name: string;
  description: string;
  system_prompt: string;
}

export interface PersonaUpdate {
  name?: string;
  description?: string;
  system_prompt?: string;
}
